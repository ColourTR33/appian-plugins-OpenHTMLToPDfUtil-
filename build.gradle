plugins {
    id 'java'
    id 'groovy'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'com.github.spotbugs' version '6.0.7'
    id 'org.owasp.dependencycheck' version '9.0.9'
    id 'pmd'
    id "jacoco"
}

group = 'com.appian.cs.plugins'
version = new groovy.xml.XmlSlurper().parse(file('src/main/resources/appian-plugin.xml')).'plugin-info'.version

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    // Appian SDK
    compileOnly name: 'appian-plug-in-sdk-24.2-stub'
    compileOnly 'com.appian:connected-systems-core:1.9.1'
    compileOnly 'javax.servlet:javax.servlet-api:3.1.0'

    // Logging (Provided by Appian)
    compileOnly 'org.apache.logging.log4j:log4j-api:2.17.1'

    compileOnly 'com.google.code.findbugs:annotations:3.0.1'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.1'

    // Bundled Dependencies
    implementation 'com.openhtmltopdf:openhtmltopdf-pdfbox:1.0.10'
    implementation 'com.openhtmltopdf:openhtmltopdf-rtl-support:1.0.10'
    implementation 'org.jsoup:jsoup:1.17.2'
    implementation 'com.ibm.icu:icu4j:74.1'
    implementation 'commons-io:commons-io:2.16.1'
    implementation 'org.apache.commons:commons-lang3:3.14.0'
    implementation 'com.google.guava:guava:33.2.0-jre'

    // Test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'

    modules {
        module("com.google.collections:google-collections") {
            replacedBy("com.google.guava:guava", "google-collections is an older version of guava")
        }
    }
}

pmd {
    consoleOutput = true
    ignoreFailures = false // Enforce quality
    ruleSets = [
            "category/java/errorprone.xml",
            "category/java/bestpractices.xml"
    ]
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

spotless {
    encoding 'UTF-8'
    java {
        // This will fix import order and formatting automatically
        importOrder('java', 'javax', 'org', 'com')
        removeUnusedImports()
        googleJavaFormat()
    }
}

// ... your other configurations for spotbugs, jacoco, test, and jar can remain ...
spotbugs {
    ignoreFailures = false
    showProgress = true
}

jar {
    archiveBaseName = 'OpenHTMLToPdfUtil'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

test {
    useJUnitPlatform()
}

